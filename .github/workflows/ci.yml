name: CI

# Enable Buildkit and let compose use it to speed up image building
env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

on:
  pull_request:
    paths-ignore:
      - "docs/**"
      - "*.rst"
      - "*.md"

  push:
    branches: ["main"]


jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v3

      - name: Find Python version
        id: python-version
        shell: bash
        run: |
          echo "::set-output name=python-version::$(cat .python-version)"

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ steps.python-version.outputs.python-version }}

      - name: Lint with black
        uses: psf/black@21.9b0

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade pre-commit

      - name: Lint
        run: pre-commit run --all-files --show-diff-on-failure


  pytest:
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_USER: ci
          POSTGRES_PASSWORD: github
          POSTGRES_DB: underdog
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:

      - name: Checkout Code Repository
        uses: actions/checkout@v3

      - name: Find Python version
        id: python-version
        shell: bash
        run: |
          echo "::set-output name=python-version::$(cat .python-version)"

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ steps.python-version.outputs.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # - name: Test with pytest
      #   id: pytest
      #   run: pytest --cov --cov-report= --no-cov-on-fail --junitxml=junit/test-results.xml --vcr-record=none
      #   env:
      #     DATABASE_URL: postgres://ci:github@localhost:5432/underdog

      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: pytest-results
          path: junit/test-results.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
